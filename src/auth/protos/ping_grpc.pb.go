// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: ping/protos/ping.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PingPongClient is the client API for PingPong service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingPongClient interface {
	// 单次请求-响应模式
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
	// 服务端流模式
	MultiPong(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingPong_MultiPongClient, error)
	// 客户端流模式
	MultiPing(ctx context.Context, opts ...grpc.CallOption) (PingPong_MultiPingClient, error)
	// 双向流模式
	MultiPingPong(ctx context.Context, opts ...grpc.CallOption) (PingPong_MultiPingPongClient, error)
}

type pingPongClient struct {
	cc grpc.ClientConnInterface
}

func NewPingPongClient(cc grpc.ClientConnInterface) PingPongClient {
	return &pingPongClient{cc}
}

func (c *pingPongClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, "/protos.PingPong/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingPongClient) MultiPong(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingPong_MultiPongClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingPong_ServiceDesc.Streams[0], "/protos.PingPong/MultiPong", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingPongMultiPongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingPong_MultiPongClient interface {
	Recv() (*PongResponse, error)
	grpc.ClientStream
}

type pingPongMultiPongClient struct {
	grpc.ClientStream
}

func (x *pingPongMultiPongClient) Recv() (*PongResponse, error) {
	m := new(PongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingPongClient) MultiPing(ctx context.Context, opts ...grpc.CallOption) (PingPong_MultiPingClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingPong_ServiceDesc.Streams[1], "/protos.PingPong/MultiPing", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingPongMultiPingClient{stream}
	return x, nil
}

type PingPong_MultiPingClient interface {
	Send(*PingRequest) error
	CloseAndRecv() (*PongResponse, error)
	grpc.ClientStream
}

type pingPongMultiPingClient struct {
	grpc.ClientStream
}

func (x *pingPongMultiPingClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingPongMultiPingClient) CloseAndRecv() (*PongResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingPongClient) MultiPingPong(ctx context.Context, opts ...grpc.CallOption) (PingPong_MultiPingPongClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingPong_ServiceDesc.Streams[2], "/protos.PingPong/MultiPingPong", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingPongMultiPingPongClient{stream}
	return x, nil
}

type PingPong_MultiPingPongClient interface {
	Send(*PingRequest) error
	Recv() (*PongResponse, error)
	grpc.ClientStream
}

type pingPongMultiPingPongClient struct {
	grpc.ClientStream
}

func (x *pingPongMultiPingPongClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingPongMultiPingPongClient) Recv() (*PongResponse, error) {
	m := new(PongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingPongServer is the server API for PingPong service.
// All implementations must embed UnimplementedPingPongServer
// for forward compatibility
type PingPongServer interface {
	// 单次请求-响应模式
	Ping(context.Context, *PingRequest) (*PongResponse, error)
	// 服务端流模式
	MultiPong(*PingRequest, PingPong_MultiPongServer) error
	// 客户端流模式
	MultiPing(PingPong_MultiPingServer) error
	// 双向流模式
	MultiPingPong(PingPong_MultiPingPongServer) error
	mustEmbedUnimplementedPingPongServer()
}

// UnimplementedPingPongServer must be embedded to have forward compatible implementations.
type UnimplementedPingPongServer struct {
}

func (UnimplementedPingPongServer) Ping(context.Context, *PingRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPingPongServer) MultiPong(*PingRequest, PingPong_MultiPongServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiPong not implemented")
}
func (UnimplementedPingPongServer) MultiPing(PingPong_MultiPingServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiPing not implemented")
}
func (UnimplementedPingPongServer) MultiPingPong(PingPong_MultiPingPongServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiPingPong not implemented")
}
func (UnimplementedPingPongServer) mustEmbedUnimplementedPingPongServer() {}

// UnsafePingPongServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingPongServer will
// result in compilation errors.
type UnsafePingPongServer interface {
	mustEmbedUnimplementedPingPongServer()
}

func RegisterPingPongServer(s grpc.ServiceRegistrar, srv PingPongServer) {
	s.RegisterService(&PingPong_ServiceDesc, srv)
}

func _PingPong_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingPongServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PingPong/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingPongServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingPong_MultiPong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingPongServer).MultiPong(m, &pingPongMultiPongServer{stream})
}

type PingPong_MultiPongServer interface {
	Send(*PongResponse) error
	grpc.ServerStream
}

type pingPongMultiPongServer struct {
	grpc.ServerStream
}

func (x *pingPongMultiPongServer) Send(m *PongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PingPong_MultiPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingPongServer).MultiPing(&pingPongMultiPingServer{stream})
}

type PingPong_MultiPingServer interface {
	SendAndClose(*PongResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type pingPongMultiPingServer struct {
	grpc.ServerStream
}

func (x *pingPongMultiPingServer) SendAndClose(m *PongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingPongMultiPingServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PingPong_MultiPingPong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingPongServer).MultiPingPong(&pingPongMultiPingPongServer{stream})
}

type PingPong_MultiPingPongServer interface {
	Send(*PongResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type pingPongMultiPingPongServer struct {
	grpc.ServerStream
}

func (x *pingPongMultiPingPongServer) Send(m *PongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingPongMultiPingPongServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingPong_ServiceDesc is the grpc.ServiceDesc for PingPong service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingPong_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PingPong",
	HandlerType: (*PingPongServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingPong_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultiPong",
			Handler:       _PingPong_MultiPong_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MultiPing",
			Handler:       _PingPong_MultiPing_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiPingPong",
			Handler:       _PingPong_MultiPingPong_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ping/protos/ping.proto",
}
